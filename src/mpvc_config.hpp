#pragma once
#ifndef __MPVC_CONFIG_HPP__
#define __MPVC_CONFIG_HPP__

#include "unicode.h"

#include <tchar.h>

#include <fstream>
#include <string>

#include "config.hpp"

struct MPVCConfig : public config::ConfigIO<_TCHAR>
{
	bool disabled;
	bool invisible;

	MPVCConfig()
	{
		config::ConfigIO<_TCHAR>::add_option(_T("Disabled"), _T("Whether the Media Keys redirection is disabled or enabled on start. true for disabled and false for enabled"), disabled);
		config::ConfigIO<_TCHAR>::add_option(_T("StartHidden"), _T("Whether the Notification Area icon is shown or not. true for hidden and false for not hidden"), invisible);
	}
public:
	static int get_config_path(std::string& configPath)
	{
		configPath.resize(MAX_PATH);
		while (!SUCCEEDED(SHGetSpecialFolderPathA(NULL, &configPath[0], CSIDL_APPDATA, TRUE)) && !SUCCEEDED(SHGetSpecialFolderPathA(NULL, &configPath[0], CSIDL_LOCAL_APPDATA, TRUE)) && !SUCCEEDED(SHGetSpecialFolderPathA(NULL, &configPath[0], CSIDL_MYDOCUMENTS, TRUE)))
		{
			int o = MessageBox(NULL, _T("Couldn't determine config folder"), _T("SHGetSpecialFolderPath error"), MB_ABORTRETRYIGNORE | MB_DEFBUTTON2);
			if (o == IDABORT)
				return 0;
			else if (o == IDRETRY)
				continue;
			else if (o == IDIGNORE)
				return -1;
		}
		configPath.resize(strlen(&configPath[0]));
		configPath.append("\\mpVolCtrl");
		CreateDirectoryA(configPath.c_str(), NULL);
		configPath.append("\\config.txt");
		return 1;
	}
	static int get_config_path(std::wstring& configPath)
	{
		configPath.resize(MAX_PATH);
		while (!SUCCEEDED(SHGetSpecialFolderPathW(NULL, &configPath[0], CSIDL_APPDATA, TRUE)) && !SUCCEEDED(SHGetSpecialFolderPathW(NULL, &configPath[0], CSIDL_LOCAL_APPDATA, TRUE)) && !SUCCEEDED(SHGetSpecialFolderPathW(NULL, &configPath[0], CSIDL_MYDOCUMENTS, TRUE)))
		{
			int o = MessageBox(NULL, _T("Couldn't determine config folder"), _T("SHGetSpecialFolderPath error"), MB_ABORTRETRYIGNORE | MB_DEFBUTTON2);
			if (o == IDABORT)
				return 0;
			else if (o == IDRETRY)
				continue;
			else if (o == IDIGNORE)
				return -1;
		}
		configPath.resize(wcslen(&configPath[0]));
		configPath.append(L"\\mpVolCtrl");
		CreateDirectoryW(configPath.c_str(), NULL);
		configPath.append(L"\\config.txt");
		return 1;
	}

	bool read_config()
	{
		std::basic_string<_TCHAR> configPath(MAX_PATH, _T('\0'));
		get_config_path(configPath);

		std::basic_fstream<_TCHAR> fs;
#ifdef _MSC_VER
		fs.open(configPath, std::basic_fstream<_TCHAR>::in);
#else
		DWORD len;
		if ((len = GetShortPathName(&configPath[0], &configPath[0], MAX_PATH)) == 0)
			return true;
		else if (len > MAX_PATH)
		{
			configPath.resize(len);
			DWORD len2;
			if ((len2 = GetShortPathName(&configPath[0], &configPath[0], len)) == 0 || len2 > len)
				return true;
		}
		configPath.resize(len);
		configPath.append(_T("\\mpVolCtrl"));
		CreateDirectory(configPath.c_str(), NULL);
		configPath.append(_T("\\config.txt"));

		std::string configPathNarrow;
		configPathNarrow.reserve(configPath.length());
		std::copy(configPath.begin(), configPath.end(), std::back_inserter(configPathNarrow));
		fs.open(configPathNarrow, std::basic_fstream<_TCHAR>::in);
#endif
		if (fs.fail())
		{
#ifdef _MSC_VER
			fs.open(configPath, std::basic_fstream<_TCHAR>::out);
#else
			fs.open(configPathNarrow, std::basic_fstream<_TCHAR>::out);
#endif
			if (!fs.fail())
			{
				fs << std::noskipws << "# Media Player Volume Control config" << std::endl << "# Generated by Media Player Volume Control " VERSION_STRING << std::endl << std::endl;
				config::ConfigIO<_TCHAR>::generate_config(std::ostreambuf_iterator<_TCHAR>(fs));
			}
		}
		else
			config::ConfigIO<_TCHAR>::parse_config(std::istreambuf_iterator<_TCHAR>(fs >> std::noskipws), std::istreambuf_iterator<_TCHAR>());
		if (fs.is_open())
			fs.close();
		return true;
	}
};

#endif // __MPVC_CONFIG_HPP__
